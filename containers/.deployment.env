#!/bin/bash

# This pipeline execution id. A Session ID if you prefer. Used to persist pipeline execution history
# It's not bad that it looks like an FQDN...
export PIPELINE_EXECUTION_ID=pipeline-$RANDOM.pegasusio.io
export PIPELINE_EXECUTION_ID=pipeline-$RANDOM.pegasusio.io
echo "[PIPELINE_EXECUTION_ID=[$PIPELINE_EXECUTION_ID]]"


# # ----------------------------------------------------------
# # ----------------------------------------------------------


# # ----------------------------------------------------------
# ---> The Local Deployment Target :  A Single VM
#
# provisioned using packer and terraform
#


# - that's the machine on which the local Deployment will happen during piepeline 's lifecycle.
# - The smallest infra setup invovles that [LOCAL_DEPLOYMENT_TARGET_HOSTNAME] :
#    => Is a VM  (VirtualBox or QEMU-KVM)
#    => Is a VM created with a (VirtualBox or QEMU-KVM) installation on [DEVOPS_WORKSTATION_HOSTNAME]
export LOCAL_DEPLOYMENT_TARGET_HOSTNAME=poste-devops-typique


export NOM_DOMAINE_SITEWEB="undocument.pokusio.io"

# +++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++ [Build : Hugo] ++++
# +++++++++++++++++++++++++++++++++++++++++++++++++++++

# ---
# Le repo dans lequel est versionné le code source de pokus
# export SSH_URI_REPO_GIT_CODE_HUGO=https://github.com/Jean-Baptiste-Lasselle/fwdkatacoda.git
# export SSH_URI_REPO_GIT_CODE_POKUS=git@github.com:Jean-Baptiste-Lasselle/fwdkatacoda.git
export SSH_URI_REPO_GIT_CODE_POKUS=git@gitlab.com:second-bureau/pegasus/pokus/pokus.git
# ---
# Le repo dans lequel est versionné le code hugo du site web
export SSH_URI_REPO_GIT_CODE_HUGO=git@github.com:Jean-Baptiste-Lasselle/hugoify.git


# +++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++          [XXX : XXXXXXXXX XXXXXXXXX]        ++++
# +++++++++++++++++++++++++++++++++++++++++++++++++++++
# ---
#
#

# see [Gitlab API v4], the PROJETS/ Endpoint GET parameter [path_with_namespace]
#
# [test-generation-hugo-prj.mock.json] contient le `JSON` réponse de l'appel de
# [Gitlab API v4], the PROJETS/ Endpoint GET parameter [path_with_namespace]
# export INFOS_REPO_GIT_HUGO_SRC_CODE=$(cat ../test-generation-hugo-prj.mock.json)
# The [GITLAB_PAGES_DEPLOYMENT_URI] https://gitlab.com URI to the deployed [Gitlab Pages] can
# be "computed" using [GITLAB_PAGES_REPO_PATH_WITH_NAMESPACE]



# BUMBLEBEE_HOME_INSIDE_CONTAINER contient le
# workspace, mais aussi le coffre des secrets
export BUMBLEBEE_HOME_INSIDE_CONTAINER=/pokus
export BUMBLEBEE_WORKSPACE_INSIDE_CONTAINER=$BUMBLEBEE_HOME_INSIDE_CONTAINER/server
# ********************************************
# ********************************************
# ********************************************
# ********************************************
# ********************************************

# Le git service provider utilisé pour le pipeline
export PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME=${PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME:-gitlab.com}
# La clef générée pour Bumblebee est ajoutée par Bumblebee, au compte de
# l'utilisateur [PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME] (par exemple [Gitlab.com])
# que le robot Bumblebee peut utiliser pour opérer.
# Pour ce faire, Bumblebee utilise :
#
# ++++ la Gitlab API v4, si [PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME] est une instance [Gitlab EE/CE] ,
#
# ++++ la Github API v3 (plus tard, v4 [GraphQL]), si [PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME] est [Github.com] ,
#
# ++++ la Gitlab API v4, si [PIPELINE_GIT_SERVICE_PROVIDER_HOSTNAME] est une instance [Gitea] ,
#

export PIPELINE_GIT_SERVICE_ACCESS_TOKEN=-kxQVjpqm6XrVnvQwZk5
export PIPELINE_GIT_SERVICE_ACCESS_TOKEN=-kxQVjpqm6XrVnvQwZk5
export PIPELINE_GIT_SERVICE_ACCESS_TOKEN=-kxQVjpqm6XrVnvQwZk5


export BUMBLEBEE_ID=bruckenberg
# export BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER=$(pwd)/.robots/$BUMBLEBEE_ID/.secrets

export BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER=$(pwd)/.robots/$BUMBLEBEE_ID/.secrets
# Among secrets, SSH Keys, placed in [$BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER/.ssh]
# And inside $BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER/.ssh, we'll put away securely our SSH Keys.
#
#
# La clef générée pour le robot [$BUMBLEBEE_ID] :
#   [$BUMBLEBEE_SSH_PRIVATE_KEY_FULLPATH],
# est accessible dans le conteneur au chemin :
#  [$BUMBLEBEE_HOME_INSIDE_CONTAINER/secrets/.ssh/$BUMBLEBEE_SSH_PRIVATE_KEY_FILENAME]
#
# ce projet Hugsby, dans le répertoire [BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER]
#

#
# ROBOTS_ID => isn't BUMBLEBEE So much cuter, sexier, cooler ? Yes, allof that !
#
export BUMBLEBEE_SSH_PRIVATE_KEY_FULLPATH=$BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER/.ssh/pegasus-bot-${BUMBLEBEE_ID}-bumblebeekey_rsa
export BUMBLEBEE_SSH_PRIVATE_KEY_FILENAME=$(echo $BUMBLEBEE_SSH_PRIVATE_KEY_FULLPATH  | awk -F '/' '{print $NF}')

export BUMBLEBEE_SSH_PUBLIC_KEY_FULLPATH=$BUMBLEBEE_SECRET_VAULT_OUTSIDE_CONTAINER/.ssh/pegasus-bot-${BUMBLEBEE_ID}-bumblebeekey_rsa.pub
export BUMBLEBEE_SSH_PUBLIC_KEY_FILENAME=$(echo $BUMBLEBEE_SSH_PUBLIC_KEY_FULLPATH  | awk -F '/' '{print $NF}')

# This git ssh command should be applied ONLY :
# => to the [DEVOPS OPERATOR] user
# => on all the machines
#
export GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa'

# -- BUMBLEBEE'S IAAC ENV inside container :
# -- BUMBLEBEE_GIT_SSH_COMMAND
export BUMBLEBEE_GIT_SSH_COMMAND="ssh -vvv -i"
export BUMBLEBEE_GIT_SSH_COMMAND="$BUMBLEBEE_GIT_SSH_COMMAND $BUMBLEBEE_HOME_INSIDE_CONTAINER/.secrets/.ssh/$BUMBLEBEE_SSH_PRIVATE_KEY_FILENAME"
export BUMBLEBEE_GIT_SSH_COMMAND="$BUMBLEBEE_GIT_SSH_COMMAND"
