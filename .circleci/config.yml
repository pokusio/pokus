version: 2.1
orbs:
  secrethub: secrethub/cli@1.0.0

jobs:
  build:
    docker:
      # using custom image, see [./.circleci/docker/primary/Dockerfile]
      - image: quay.io/pok-us-io/pokus_api_build:0.0.2
        # if docker image repository required docker login and permissions to docker pull
        # auth:
          # username: $POKUS_BOT_QUAY_USERNAME
          # password: $POKUS_BOT_QUAY_TOKEN
    working_directory: /ci.pok-us-io/pipeline/work

    environment:
      TEST_RESULTS: /ci.pok-us-io/pipeline/tmp/test-results
    steps:
      - checkout
      - run:
          name: Run unit tests
          environment:
            TSOA_VERSION: "3.2.1"
            MULTER_VERSION: "1.4.2"
          command: |
            set -ou pipefail
            npm install -g tsoa@${TSOA_VERSION} multer@${MULTER_VERSION}
            npm install
            tsoa routes
            npm run build
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

  publish:
    # https://github.com/secrethub/examples/blob/master/ci/circleci/publish-docker/.circleci/config.yml
    docker:
      # using custom image, see [./.circleci/docker/primary/Dockerfile] in
      # the pipeline operator https://github.com/pok-us-io/cci-pipeline-operator/issues/1
      - image: quay.io/pok-us-io/pokus_api_oci_build:0.0.2
        auth:
          username: $POKUS_BOT_QUAY_USERNAME
          password: $POKUS_BOT_QUAY_TOKEN
    working_directory: /ci.pok-us-io/pipeline/work
    steps:
      - setup_remote_docker
      # This should go into custom library image, here's only for the sake of explanation
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

      - checkout
      - secrethub/install
      - deploy:
          name: Build and push Docker image
          command: |
            QUAY_BOT_USERNAME=$(secrethub read pok-us-io/api/staging/docker/quay/botusername)
            QUAY_BOT_SECRET=$(secrethub read pok-us-io/api/staging/docker/quay/botoken)
            docker login -u="${QUAY_BOT_USERNAME}" -p="${QUAY_BOT_SECRET}" quay.io

            cd containers/
            source .deployment.env
            cp oci/jinja2.Dockerfile oci/Dockerfile
            sed -i "s#BUMBLEBEE_HOME_INSIDE_CONTAINER_JINJA2_VAR#$BUMBLEBEE_HOME_INSIDE_CONTAINER#g" oci/Dockerfile
            # docker-compose up -d init_projet_hugo
            # docker-compose up -d --build --force-recreate init_hugo_resume && docker-compose logs -f init_hugo_resume
            docker-compose config
            docker-compose build

            TAG="${POKUS_VERSION}"
            pwd
            ls -allh
            docker push "quay.io/pok-us-io/pokus-api:${TAG}"
            pwd

workflows:
  version: 2
  build_and_publish:
    jobs:
      - build
      - publish:
          context: pokus-dev
